// Do NOT change. Changes will be lost next time file is generated

#define R__DICTIONARY_FILENAME dIworkdIDropboxdIHaSpectdIdevdIHASPECT6dIhsfinalstatedIParticleCuts_C_ACLiC_dict

/*******************************************************************/
#include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <assert.h>
#define G__DICTIONARY
#include "RConfig.h"
#include "TClass.h"
#include "TDictAttributeMap.h"
#include "TInterpreter.h"
#include "TROOT.h"
#include "TBuffer.h"
#include "TMemberInspector.h"
#include "TInterpreter.h"
#include "TVirtualMutex.h"
#include "TError.h"

#ifndef G__ROOT
#define G__ROOT
#endif

#include "RtypesImp.h"
#include "TIsAProxy.h"
#include "TFileMergeInfo.h"
#include <algorithm>
#include "TCollectionProxyInfo.h"
/*******************************************************************/

#include "TDataMember.h"

// Since CINT ignores the std namespace, we need to do so in this file.
namespace std {} using namespace std;

// Header files passed as explicit arguments
#include "/work/Dropbox/HaSpect/dev/HASPECT6/hsfinalstate/ParticleCuts.C"

// Header files passed via #pragma extra_include

namespace HS {
   namespace ROOT {
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance();
      static TClass *HS_Dictionary();

      // Function generating the singleton type initializer
      inline ::ROOT::TGenericClassInfo *GenerateInitInstance()
      {
         static ::ROOT::TGenericClassInfo 
            instance("HS", 0 /*version*/, "THSParticle.h", 29,
                     ::ROOT::Internal::DefineBehavior((void*)0,(void*)0),
                     &HS_Dictionary, 0);
         return &instance;
      }
      // Insure that the inline function is _not_ optimized away by the compiler
      ::ROOT::TGenericClassInfo *(*_R__UNIQUE_DICT_(InitFunctionKeeper))() = &GenerateInitInstance;  
      // Static variable to force the class initialization
      static ::ROOT::TGenericClassInfo *_R__UNIQUE_DICT_(Init) = GenerateInitInstance(); R__UseDummy(_R__UNIQUE_DICT_(Init));

      // Dictionary for non-ClassDef classes
      static TClass *HS_Dictionary() {
         return GenerateInitInstance()->GetClass();
      }

   }
}

namespace ROOT {
   static TClass *HScLcLParticleCuts_Dictionary();
   static void HScLcLParticleCuts_TClassManip(TClass*);
   static void *new_HScLcLParticleCuts(void *p = 0);
   static void *newArray_HScLcLParticleCuts(Long_t size, void *p);
   static void delete_HScLcLParticleCuts(void *p);
   static void deleteArray_HScLcLParticleCuts(void *p);
   static void destruct_HScLcLParticleCuts(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const ::HS::ParticleCuts*)
   {
      ::HS::ParticleCuts *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(::HS::ParticleCuts));
      static ::ROOT::TGenericClassInfo 
         instance("HS::ParticleCuts", "ParticleCuts.h", 27,
                  typeid(::HS::ParticleCuts), ::ROOT::Internal::DefineBehavior(ptr, ptr),
                  &HScLcLParticleCuts_Dictionary, isa_proxy, 4,
                  sizeof(::HS::ParticleCuts) );
      instance.SetNew(&new_HScLcLParticleCuts);
      instance.SetNewArray(&newArray_HScLcLParticleCuts);
      instance.SetDelete(&delete_HScLcLParticleCuts);
      instance.SetDeleteArray(&deleteArray_HScLcLParticleCuts);
      instance.SetDestructor(&destruct_HScLcLParticleCuts);
      return &instance;
   }
   TGenericClassInfo *GenerateInitInstance(const ::HS::ParticleCuts*)
   {
      return GenerateInitInstanceLocal((::HS::ParticleCuts*)0);
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_DICT_(Init) = GenerateInitInstanceLocal((const ::HS::ParticleCuts*)0x0); R__UseDummy(_R__UNIQUE_DICT_(Init));

   // Dictionary for non-ClassDef classes
   static TClass *HScLcLParticleCuts_Dictionary() {
      TClass* theClass =::ROOT::GenerateInitInstanceLocal((const ::HS::ParticleCuts*)0x0)->GetClass();
      HScLcLParticleCuts_TClassManip(theClass);
   return theClass;
   }

   static void HScLcLParticleCuts_TClassManip(TClass* theClass){
      theClass->CreateAttributeMap();
      TDictAttributeMap* attrMap( theClass->GetAttributeMap() );
      attrMap->AddProperty("file_name","/work/Dropbox/HaSpect/dev/HASPECT6/hsfinalstate/ParticleCuts.h");
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_HScLcLParticleCuts(void *p) {
      return  p ? ::new((::ROOT::Internal::TOperatorNewHelper*)p) ::HS::ParticleCuts : new ::HS::ParticleCuts;
   }
   static void *newArray_HScLcLParticleCuts(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::Internal::TOperatorNewHelper*)p) ::HS::ParticleCuts[nElements] : new ::HS::ParticleCuts[nElements];
   }
   // Wrapper around operator delete
   static void delete_HScLcLParticleCuts(void *p) {
      delete ((::HS::ParticleCuts*)p);
   }
   static void deleteArray_HScLcLParticleCuts(void *p) {
      delete [] ((::HS::ParticleCuts*)p);
   }
   static void destruct_HScLcLParticleCuts(void *p) {
      typedef ::HS::ParticleCuts current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class ::HS::ParticleCuts

namespace ROOT {
   static TClass *vectorlEshared_ptrlECutsgRsPgR_Dictionary();
   static void vectorlEshared_ptrlECutsgRsPgR_TClassManip(TClass*);
   static void *new_vectorlEshared_ptrlECutsgRsPgR(void *p = 0);
   static void *newArray_vectorlEshared_ptrlECutsgRsPgR(Long_t size, void *p);
   static void delete_vectorlEshared_ptrlECutsgRsPgR(void *p);
   static void deleteArray_vectorlEshared_ptrlECutsgRsPgR(void *p);
   static void destruct_vectorlEshared_ptrlECutsgRsPgR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<shared_ptr<Cuts> >*)
   {
      vector<shared_ptr<Cuts> > *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<shared_ptr<Cuts> >));
      static ::ROOT::TGenericClassInfo 
         instance("vector<shared_ptr<Cuts> >", -2, "vector", 216,
                  typeid(vector<shared_ptr<Cuts> >), ::ROOT::Internal::DefineBehavior(ptr, ptr),
                  &vectorlEshared_ptrlECutsgRsPgR_Dictionary, isa_proxy, 0,
                  sizeof(vector<shared_ptr<Cuts> >) );
      instance.SetNew(&new_vectorlEshared_ptrlECutsgRsPgR);
      instance.SetNewArray(&newArray_vectorlEshared_ptrlECutsgRsPgR);
      instance.SetDelete(&delete_vectorlEshared_ptrlECutsgRsPgR);
      instance.SetDeleteArray(&deleteArray_vectorlEshared_ptrlECutsgRsPgR);
      instance.SetDestructor(&destruct_vectorlEshared_ptrlECutsgRsPgR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<shared_ptr<Cuts> > >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_DICT_(Init) = GenerateInitInstanceLocal((const vector<shared_ptr<Cuts> >*)0x0); R__UseDummy(_R__UNIQUE_DICT_(Init));

   // Dictionary for non-ClassDef classes
   static TClass *vectorlEshared_ptrlECutsgRsPgR_Dictionary() {
      TClass* theClass =::ROOT::GenerateInitInstanceLocal((const vector<shared_ptr<Cuts> >*)0x0)->GetClass();
      vectorlEshared_ptrlECutsgRsPgR_TClassManip(theClass);
   return theClass;
   }

   static void vectorlEshared_ptrlECutsgRsPgR_TClassManip(TClass* ){
   }

} // end of namespace ROOT

namespace ROOT {
   // Wrappers around operator new
   static void *new_vectorlEshared_ptrlECutsgRsPgR(void *p) {
      return  p ? ::new((::ROOT::Internal::TOperatorNewHelper*)p) vector<shared_ptr<Cuts> > : new vector<shared_ptr<Cuts> >;
   }
   static void *newArray_vectorlEshared_ptrlECutsgRsPgR(Long_t nElements, void *p) {
      return p ? ::new((::ROOT::Internal::TOperatorNewHelper*)p) vector<shared_ptr<Cuts> >[nElements] : new vector<shared_ptr<Cuts> >[nElements];
   }
   // Wrapper around operator delete
   static void delete_vectorlEshared_ptrlECutsgRsPgR(void *p) {
      delete ((vector<shared_ptr<Cuts> >*)p);
   }
   static void deleteArray_vectorlEshared_ptrlECutsgRsPgR(void *p) {
      delete [] ((vector<shared_ptr<Cuts> >*)p);
   }
   static void destruct_vectorlEshared_ptrlECutsgRsPgR(void *p) {
      typedef vector<shared_ptr<Cuts> > current_t;
      ((current_t*)p)->~current_t();
   }
} // end of namespace ROOT for class vector<shared_ptr<Cuts> >

namespace ROOT {
   static TClass *vectorlEHScLcLTHSParticlegR_Dictionary();
   static void vectorlEHScLcLTHSParticlegR_TClassManip(TClass*);
   static void *new_vectorlEHScLcLTHSParticlegR(void *p = 0);
   static void *newArray_vectorlEHScLcLTHSParticlegR(Long_t size, void *p);
   static void delete_vectorlEHScLcLTHSParticlegR(void *p);
   static void deleteArray_vectorlEHScLcLTHSParticlegR(void *p);
   static void destruct_vectorlEHScLcLTHSParticlegR(void *p);

   // Function generating the singleton type initializer
   static TGenericClassInfo *GenerateInitInstanceLocal(const vector<HS::THSParticle>*)
   {
      vector<HS::THSParticle> *ptr = 0;
      static ::TVirtualIsAProxy* isa_proxy = new ::TIsAProxy(typeid(vector<HS::THSParticle>));
      static ::ROOT::TGenericClassInfo 
         instance("vector<HS::THSParticle>", -2, "vector", 216,
                  typeid(vector<HS::THSParticle>), ::ROOT::Internal::DefineBehavior(ptr, ptr),
                  &vectorlEHScLcLTHSParticlegR_Dictionary, isa_proxy, 4,
                  sizeof(vector<HS::THSParticle>) );
      instance.SetNew(&new_vectorlEHScLcLTHSParticlegR);
      instance.SetNewArray(&newArray_vectorlEHScLcLTHSParticlegR);
      instance.SetDelete(&delete_vectorlEHScLcLTHSParticlegR);
      instance.SetDeleteArray(&deleteArray_vectorlEHScLcLTHSParticlegR);
      instance.SetDestructor(&destruct_vectorlEHScLcLTHSParticlegR);
      instance.AdoptCollectionProxyInfo(TCollectionProxyInfo::Generate(TCollectionProxyInfo::Pushback< vector<HS::THSParticle> >()));
      return &instance;
   }
   // Static variable to force the class initialization
   static ::ROOT::TGenericClassInfo *_R__UNIQUE_DICT_(Init) = GenerateInitInstanceLocal((const vector<HS::THSParticle>*)0x0); R__UseDummy(_R__UNIQUE_DICT_(Init));

   // Dictionary for non-ClassDef classes
   static TClass *vectorlEHScLcLTHSParticlegR