/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "VectorSDME.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(VectorSDME) 
 
 VectorSDME::VectorSDME(const char *name, const char *title, 
                        RooAbsReal& _HelCosTh,
                        RooAbsReal& _HelPhi,
                        RooAbsReal& _MesonPhi,
                        RooAbsReal& _Pol,
                        RooAbsCategory& _PolState,
                        RooAbsReal& _rho000,
                        RooAbsReal& _Rerho010,
                        RooAbsReal& _rho01m1,
                        RooAbsReal& _rho111,
                        RooAbsReal& _rho100,
                        RooAbsReal& _Rerho110,
                        RooAbsReal& _rho11m1,
                        RooAbsReal& _Imrho210,
                        RooAbsReal& _Imrho21m1) :
HS::FIT::RooHSEventsPDF(name,title),
   HelCosTh("HelCosTh","HelCosTh",this,_HelCosTh),
   HelPhi("HelPhi","HelPhi",this,_HelPhi),
   MesonPhi("MesonPhi","MesonPhi",this,_MesonPhi),
   Pol("Pol","Pol",this,_Pol),
   PolState("PolState","PolState",this,_PolState),
   rho000("rho000","rho000",this,_rho000),
   Rerho010("Rerho010","Rerho010",this,_Rerho010),
   rho01m1("rho01m1","rho01m1",this,_rho01m1),
   rho111("rho111","rho111",this,_rho111),
   rho100("rho100","rho100",this,_rho100),
   Rerho110("Rerho110","Rerho110",this,_Rerho110),
   rho11m1("rho11m1","rho11m1",this,_rho11m1),
   Imrho210("Imrho210","Imrho210",this,_Imrho210),
   Imrho21m1("Imrho21m1","Imrho21m1",this,_Imrho21m1)
 { 
   MakeSets();
   HelCosTh.SetName(_HelCosTh.GetName());
   HelPhi.SetName(_HelPhi.GetName());
   MesonPhi.SetName(_MesonPhi.GetName());
   Pol.SetName(_Pol.GetName());
   PolState.SetName(_PolState.GetName());
   rho000.SetName(_rho000.GetName());
   Rerho010.SetName(_Rerho010.GetName());
   rho01m1.SetName(_rho01m1.GetName());
   rho111.SetName(_rho111.GetName());
   rho100.SetName(_rho100.GetName());
   Rerho110.SetName(_Rerho110.GetName());
   rho11m1.SetName(_rho11m1.GetName());
   Imrho210.SetName(_Imrho210.GetName());
   Imrho21m1.SetName(_Imrho21m1.GetName());
 } 


 VectorSDME::VectorSDME(const VectorSDME& other, const char* name) :  
   HS::FIT::RooHSEventsPDF(other,name),
   HelCosTh("HelCosTh",this,other.HelCosTh),
   HelPhi("HelPhi",this,other.HelPhi),
   MesonPhi("MesonPhi",this,other.MesonPhi),
   Pol("Pol",this,other.Pol),
   PolState("PolState",this,other.PolState),
   rho000("rho000",this,other.rho000),
   Rerho010("Rerho010",this,other.Rerho010),
   rho01m1("rho01m1",this,other.rho01m1),
   rho111("rho111",this,other.rho111),
   rho100("rho100",this,other.rho100),
   Rerho110("Rerho110",this,other.Rerho110),
   rho11m1("rho11m1",this,other.rho11m1),
   Imrho210("Imrho210",this,other.Imrho210),
   Imrho21m1("Imrho21m1",this,other.Imrho21m1)
 { 
   MakeSets();
   HelCosTh.SetName(other.HelCosTh.GetName());
   HelPhi.SetName(other.HelPhi.GetName());
   MesonPhi.SetName(other.MesonPhi.GetName());
   Pol.SetName(other.Pol.GetName());
   PolState.SetName(other.PolState.GetName());
   rho000.SetName(other.rho000.GetName());
   Rerho010.SetName(other.Rerho010.GetName());
   rho01m1.SetName(other.rho01m1.GetName());
   rho111.SetName(other.rho111.GetName());
   rho100.SetName(other.rho100.GetName());
   Rerho110.SetName(other.Rerho110.GetName());
   rho11m1.SetName(other.rho11m1.GetName());
   Imrho210.SetName(other.Imrho210.GetName());
   Imrho21m1.SetName(other.Imrho21m1.GetName());
   if(fEvTree) SetEvTree(fEvTree,fCut);//Needs fProxSet filled first
 } 
void VectorSDME::MakeSets(){
   fProxSet.push_back(&HelCosTh);
   fProxSet.push_back(&HelPhi);
   fProxSet.push_back(&MesonPhi);
   fProxSet.push_back(&Pol);
   fCatSet.push_back(&PolState);
   fParSet.push_back(&rho000);
   fParSet.push_back(&Rerho010);
   fParSet.push_back(&rho01m1);
   fParSet.push_back(&rho111);
   fParSet.push_back(&rho100);
   fParSet.push_back(&Rerho110);
   fParSet.push_back(&rho11m1);
   fParSet.push_back(&Imrho210);
   fParSet.push_back(&Imrho21m1);
   InitSets();
}



 Double_t VectorSDME::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   Double_t cosSqTheta = HelCosTh * HelCosTh;
   Double_t sinSqTheta = 1 - cosSqTheta;
   Double_t theta = TMath::ACos(HelCosTh);
   Double_t sin2theta = TMath::Sin(2.0 * theta);
   Double_t cos2theta = TMath::Cos(2.0 * theta);
   Double_t cos2phi = TMath::Cos(2.0 * HelPhi);
   Double_t sin2phi = TMath::Sin(2.0 * HelPhi);
   Double_t cosphi = TMath::Cos(HelPhi);
   Double_t sinphi = TMath::Sin(HelPhi);
   Double_t sqrt2 = TMath::Sqrt(2.0);
   Double_t cos2PHI = TMath::Cos(2.0*MesonPhi);
   Double_t sin2PHI = TMath::Sin(2.0*MesonPhi);
   
   Double_t W0 = (3.0 / 4.0*TMath::Pi()) * (0.5*(1.0-rho000) + 0.5*(3.0*rho000-1.0)*cosSqTheta - sqrt2*Rerho010*sin2theta*cosphi - rho01m1*sinSqTheta*cos2phi);
   Double_t W1 = (3.0 / 4.0*TMath::Pi()) * (rho111*sinSqTheta + rho100*cosSqTheta - sqrt2*Rerho110*sin2theta*cosphi - rho11m1*sinSqTheta*cos2phi);
   Double_t W2 = (3.0 / 4.0*TMath::Pi()) * (sqrt2*Imrho210*sin2theta*sinphi + Imrho21m1*sinSqTheta*sin2phi);
   
   Double_t W = W0 - PolState*Pol*cos2PHI*W1 - PolState*Pol*sin2PHI*W2;
   
   if (W<=0) W=1.0e-12;
   
   return W; 
 } 

Double_t VectorSDME::evaluateMC(const vector<Float_t> *vars,const  vector<Int_t> *cats) const {
// ENTER IDENTICAL EXPRESSION TO evaluate() IN TERMS OF MC VARIABLE ARGUMENTS HERE
  Double_t mcHelCosTh=(*vars)[fTreeEntry*fNvars+0];
  Double_t mcHelPhi=(*vars)[fTreeEntry*fNvars+1];
  Double_t mcMesonPhi=(*vars)[fTreeEntry*fNvars+2];
  Double_t mcPol=(*vars)[fTreeEntry*fNvars+3];
  Int_t mcPolState=(*cats)[fTreeEntry*fNcats+0];
  
   Double_t cosSqTheta = mcHelCosTh * mcHelCosTh;
   Double_t sinSqTheta = 1 - cosSqTheta;
   Double_t theta = TMath::ACos(mcHelCosTh);
   Double_t sin2theta = TMath::Sin(2.0 * theta);
   Double_t cos2theta = TMath::Cos(2.0 * theta);
   Double_t cos2phi = TMath::Cos(2.0 * mcHelPhi);
   Double_t sin2phi = TMath::Sin(2.0 * mcHelPhi);
   Double_t cosphi = TMath::Cos(mcHelPhi);
   Double_t sinphi = TMath::Sin(mcHelPhi);
   Double_t sqrt2 = TMath::Sqrt(2.0);
   Double_t cos2PHI = TMath::Cos(2.0*mcMesonPhi);
   Double_t sin2PHI = TMath::Sin(2.0*mcMesonPhi);
   
   Double_t W0 = (3.0 / 4.0*TMath::Pi()) * (0.5*(1.0-rho000) + 0.5*(3.0*rho000-1.0)*cosSqTheta - sqrt2*Rerho010*sin2theta*cosphi - rho01m1*sinSqTheta*cos2phi);
   Double_t W1 = (3.0 / 4.0*TMath::Pi()) * (rho111*sinSqTheta + rho100*cosSqTheta - sqrt2*Rerho110*sin2theta*cosphi - rho11m1*sinSqTheta*cos2phi);
   Double_t W2 = (3.0 / 4.0*TMath::Pi()) * (sqrt2*Imrho210*sin2theta*sinphi + Imrho21m1*sinSqTheta*sin2phi);
   
   Double_t W = W0 - mcPolState*mcPol*cos2PHI*W1 - mcPolState*mcPol*sin2PHI*W2;
   
   if (W<=0) W=1.0E-12;

   return W;   
}


