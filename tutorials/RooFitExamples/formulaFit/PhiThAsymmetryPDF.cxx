/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "PhiThAsymmetryPDF.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 

ClassImp(PhiThAsymmetryPDF); 

 PhiThAsymmetryPDF::PhiThAsymmetryPDF(const char *name, const char *title, 
                        RooAbsReal& _Phi,
		        RooAbsReal& _Theta,
                        RooAbsReal& _A,
                        RooAbsReal& _B) :
   HS::FIT::RooHSEventsPDF(name,title),
   Phi("Phi","Phi",this,_Phi),
   Theta("Theta","Theta",this,_Theta),
   A("A","A",this,_A),
   B("B","B",this,_B)
 { 
   MakeSets();
   Phi.SetName(_Phi.GetName());
   Theta.SetName(Theta.GetName());
   A.SetName(_A.GetName());
   B.SetName(_B.GetName());
 } 


 PhiThAsymmetryPDF::PhiThAsymmetryPDF(const PhiThAsymmetryPDF& other, const char* name) :  
   HS::FIT::RooHSEventsPDF(other,name),
   Phi("Phi",this,other.Phi),
   Theta("Theta",this,other.Theta),
   A("A",this,other.A),
   B("B",this,other.B)
 { 
   MakeSets();
   Phi.SetName(other.Phi.GetName());
   Theta.SetName(other.Theta.GetName());
   A.SetName(other.A.GetName());
   B.SetName(other.B.GetName());
   if(fEvTree) SetEvTree(fEvTree,fCut);//Needs fProxSet filled first
 } 
void PhiThAsymmetryPDF::MakeSets(){
   fProxSet.push_back(&Phi);
   fProxSet.push_back(&Theta);
   fParSet.push_back(&A);
   fParSet.push_back(&B);
   InitSets();
}



 Double_t PhiThAsymmetryPDF::evaluate() const 
 { 
   // ENTER EXPRESSION IN TERMS OF VARIABLE ARGUMENTS HERE 
   return 1.0 + (A*TMath::Cos(2*TMath::DegToRad()*Phi)+B*TMath::Sin(2*TMath::DegToRad()*Phi));
   // return 1.0 + (A*TMath::Cos(2/57.29578*Phi)+B*0);
 
 } 

Double_t PhiThAsymmetryPDF::evaluateMC(const vector<Float_t> *vars,const  vector<Int_t> *cats) const {
// ENTER IDENTICAL EXPRESSION TO evaluate() IN TERMS OF MC VARIABLE ARGUMENTS HERE
  Double_t mcPhi=(*vars)[fTreeEntry*fNvars+0];
  return 1.0 + (A*TMath::Cos(2*TMath::DegToRad()*mcPhi)+B*TMath::Sin(2*TMath::DegToRad()*mcPhi)); 
	    
}


